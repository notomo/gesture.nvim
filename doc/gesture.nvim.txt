*gesture.nvim.txt*

==============================================================================
Lua module: gesture                                     *gesture.nvim-gesture*

draw({opts})                                                  *gesture.draw()*
  Draw a gesture line.

  Parameters: ~
    {opts} (GestureDrawOption?) |GestureDrawOption|

suspend()                                                  *gesture.suspend()*
  Suspend gesture.

finish()                                                    *gesture.finish()*
  Finish the gesture and execute matched action.

cancel()                                                    *gesture.cancel()*
  Cancel the gesture.

register({info})                                          *gesture.register()*
  Register a gesture.

  Parameters: ~
    {info} (GestureInfo) |GestureInfo|

clear()                                                      *gesture.clear()*
  Clear the registered gestures.

up({opts})                                                      *gesture.up()*
  Up input

  Parameters: ~
    {opts} (GestureInputOption?) |GestureInputOption|

  Return: ~
    (GestureInputDefinition) used as an element of |GestureInfo|'s inputs

down({opts})                                                  *gesture.down()*
  Down input

  Parameters: ~
    {opts} (GestureInputOption?) |GestureInputOption|

  Return: ~
    (GestureInputDefinition) used as an element of |GestureInfo|'s inputs

right({opts})                                                *gesture.right()*
  Right input

  Parameters: ~
    {opts} (GestureInputOption?) |GestureInputOption|

  Return: ~
    (GestureInputDefinition) used as an element of |GestureInfo|'s inputs

left({opts})                                                  *gesture.left()*
  Left input

  Parameters: ~
    {opts} (GestureInputOption?) |GestureInputOption|

  Return: ~
    (GestureInputDefinition) used as an element of |GestureInfo|'s inputs

==============================================================================
STRUCTURE                                             *gesture.nvim-STRUCTURE*

GestureLengthThresholds                              *GestureLengthThresholds*

- {x} (integer?) x axis length threshold
- {y} (integer?) y axis length threshold

GestureDrawOption                                          *GestureDrawOption*

- {show_board?} (boolean) show inputted directions and matched gesture name (default: true)
- {winblend?} (integer) background window's 'winblend' (default: 100)
- {length_thresholds?} (GestureLengthThresholds) recognize as input if its length is greater than threshold. |GestureLengthThresholds|

GestureInfo                                                      *GestureInfo*
  - Prefers `match` over `inputs`.
  - Prefers `can_match` over `inputs`.

- {name} (string?) a displayed name
- {inputs} (GestureInputDefinition[]?) |GestureInputDefinition|
- {match} ((fun(ctx:GestureActionContext):boolean)?) This is called on every |gesture.draw()| and |gesture.finish()|. If returns true, it means the gesture matches current context.
- {can_match} ((fun(ctx:GestureActionContext):boolean)?) This is called on every |gesture.draw()|. If returns false, it means the gesture can not match anymore.
- {action} (string|fun(ctx:GestureActionContext)|table) an action executed on matched. can use callable table.
- {nowait} (boolean?) to define nowait gesture
- {buffer} ((string|integer)?) to define the buffer local gesture

GestureActionContext                                    *GestureActionContext*

- {first_position} (integer[]) the first position drawn by gesture
- {last_position} (integer[]) the last position drawn by gesture
- {first_window_id} (integer) the first position's window id
- {last_window_id} (function()) returns the last position's window id
- {inputs} (GestureInput[]) |GestureInput|

GestureInputOption                                        *GestureInputOption*

- {max_length} (integer?) max length of the input line
- {min_length} (integer?) min length of the input line

GestureInput                                                    *GestureInput*

- {direction} ("UP"|"DOWN"|"LEFT"|"RIGHT")
- {length} (integer)

GestureInputDefinition                                *GestureInputDefinition*


==============================================================================
HIGHLIGHT GROUPS                               *gesture.nvim-HIGHLIGHT-GROUPS*

GestureLine                                                   *hl-GestureLine*
  used for drawing gesture line

GestureInputNotMatched                             *hl-GestureInputNotMatched*
  used for input if no matched gesture exists 

GestureInput                                                 *hl-GestureInput*
  used for input

GestureBackground                                       *hl-GestureBackground*
  used for background window

GestureActionLabel                                     *hl-GestureActionLabel*
  used for action label

==============================================================================
EXAMPLE                                                 *gesture.nvim-EXAMPLE*

>lua
  vim.opt.mouse = "a"

  vim.keymap.set("n", "<LeftDrag>", [[<Cmd>lua require("gesture").draw()<CR>]], { silent = true })
  vim.keymap.set("n", "<LeftRelease>", [[<Cmd>lua require("gesture").finish()<CR>]], { silent = true })

  -- or if you would like to use right click
  vim.keymap.set("n", "<RightMouse>", [[<Nop>]])
  vim.keymap.set("n", "<RightDrag>", [[<Cmd>lua require("gesture").draw()<CR>]], { silent = true })
  vim.keymap.set("n", "<RightRelease>", [[<Cmd>lua require("gesture").finish()<CR>]], { silent = true })

  local gesture = require("gesture")
  gesture.register({
    name = "scroll to bottom",
    inputs = { gesture.up(), gesture.down() },
    action = "normal! G",
  })
  gesture.register({
    name = "next tab",
    inputs = { gesture.right() },
    action = "tabnext",
  })
  gesture.register({
    name = "previous tab",
    inputs = { gesture.left() },
    action = function(ctx) -- also can use callable
      vim.cmd.tabprevious()
    end,
  })
  gesture.register({
    name = "go back",
    inputs = { gesture.right(), gesture.left() },
    -- map to `<C-o>` keycode
    action = function()
      vim.api.nvim_feedkeys(vim.keycode("<C-o>"), "n", true)
    end,
  })
<

==============================================================================
vim:tw=78:ts=8:ft=help
